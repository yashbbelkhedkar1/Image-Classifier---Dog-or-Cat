# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10_bZ1V9lOS8NVfskjEiKM6yeso-gUgJR
"""

from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from keras.utils import to_categorical
import os

#image data shape (n , width, height, rbg)

X = []#image
Y = []#categories

animal_name = {'dog' : 0 , 'cat' : 1}

def image_to_array(folder,name):
    for image in os.listdir(folder):
        loaded_image = Image.open(os.path.join(folder,image))
        resized_image = Image.Image.resize(loaded_image,[500,500])
        image_array = np.array(resized_image)
        
        X.append(image_array)
        Y.append(animal_name[name])

def show_image(x):
    plt.imshow(X[x])
    plt.show()
    print("The Animal is : ",Y[x])

!unzip cat.zip
!unzip dog.zip

folder_name = r'dog'
image_to_array(folder_name,'dog')

folder_name = r'cat'
image_to_array(folder_name,'cat')

show_image(1500)

Y = to_categorical(Y,num_classes =2)
X = np.array(X)

from keras.layers import Activation,Conv2D,Dense, Flatten,MaxPool2D
from keras.models import Sequential

model = Sequential()
model.add(Conv2D(32,(5,5),padding = 'same',activation = 'relu',input_shape =(500,500,3)))
model.add(MaxPool2D(pool_size = (2,2)))
model.add(Conv2D(100,(5,5),padding = 'same',activation = 'relu'))
model.add(MaxPool2D(pool_size = (2,2)))
model.add(Conv2D(100,(5,5),padding = 'same',activation = 'relu'))
model.add(MaxPool2D(pool_size = (2,2)))
model.add(Flatten())
model.add(Dense(124))
model.add(Activation('relu'))
model.add(Dense(2))
model.add(Activation('sigmoid'))
model.summary()

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size = 0.1)

from keras.optimizers import Adam

optimizer = Adam(lr = 0.001)

model.compile(optimizer = optimizer,loss = 'binary_crossentropy',metrics = ['acc'])
h = model.fit(X_train,y_train,batch_size =10,epochs = 5,validation_data = (X_test,y_test))
model.save('animal_classifier_CNN.h5')

plt.plot(h.history['acc'])
plt.plot(h.history['val_acc'])
plt.xlabel("CNN accuracy : train and test")
plt.ylabel("epoch number")
plt.legend(loc = 'lower right')